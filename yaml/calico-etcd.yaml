---
# Source: calico/templates/calico-etcd-secrets.yaml
# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  # etcd-key: (cat /k8s/kubernetes/ssl/server-key.pem | base64 -w 0) # 将输出结果填写在这里
  # etcd-cert: (cat /k8s/kubernetes/ssl/server.pem | base64 -w 0) # 将输出结果填写在这里
  # etcd-ca: (cat /k8s/kubernetes/ssl/ca.pem | base64 -w 0) # 将输出结果填写在这里

  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclBMZmZrbVZ3aUhad3d5SDZaejVDbncwNHlzODVnYVlWVHhYQ21LUG1idzVUeHQvCjZXL1pYUkJVQ1hBMHB6TWJySjdaYVN2eXdYcUYyZFpTUmJMeGk3Ly9pVm9tOTcyOTJWMjU3cHo5cE9nZVZMZUEKUmlySlg5TEhJcC9KQ29nUC9WbWtzeGpuakEvT2NrYW5VZWtqcHRjOEc1NXI2K1haYkhONDRCM21GVUdJVXlCNgpabmkxL2RGckp4L1h6OTVwcExVeUk2bklPUkNBa3NlSnJpZGxIZ0t1QXdqMUE4dGtVKzhTWnNhWUJjUFVuVzkvClJsTmNYRDZOUXAwSVNuL2gxQ0tlN0hTdTZpZW1xUHpQTlRxTTI0eDZXTzcwMCs5TEZYZW5NSGNBNG9aaWZNSU0KZkdWUHZaVlVKMkZxQzVHb0VrTUV3RGZlOUJHQWlFNHRYQkczWFFJREFRQUJBb0lCQUhGZjNhYlo4alNMSUVlKwo1VEg5MXp4S1pCa3ZkUUtOL0RxVURiTWZIV2Y0ZmRFZ0ErQXhsRnB2bzhkMEtQQWFqdC9BV21HWmo4L0oxQWtUCmVHZDhnTi9PQTJRMUZ5cDgxZ0d5Y1hxOHE0SDVNRGowK2tBRk9IRjZxVlJIVHZGNmRKRHV2UXN6SGtjdzdYTDQKWWlOT0pETHhFZFJCTEJvK1dTUEJKdEkwaDJvU3NhdnIwUUVxbU83d1c0NHVEZFR4WWh4Sm5kK3VKUUxidTF5OQprRmxaSnpHazRYZFpLa1ZTaXg5ZE9NMmFRRmVKMktIcEZmMmlsbG1xWUdOczJFaUhZZHI2QVp3ejNqdVBKT2lVCkdZZ21MUDVxUmJPYlBYdmU3UHkrdkVLUVc3WTNTTGxuQWZSaHAvekdSV2ptRVJIdUprRnZ0UTloa3BiQXd5cUkKR3hoSG84RUNnWUVBMXlBQ1A1OHBJaHZxRzdUSHBiR1BWRnFxQ2FtSUVoam5xRU5paWNrM2NsY3R5UWtrMUkwTQo2UllaWGJESlZFL1Mza0JlZURxZXF0TlhvTGxJWXhXeTJBRFJUenArY29iNFlvcURQYnkzZll6T1lHOG5qVXdNCkpPWHRQZEswSVhaSkZGejlKZWgweEc0UFgwK2sxS2pxamRmajVRK241cVJxc0VXcVFBbGEvamtDZ1lFQXpjOVoKQm10SlJkQklJeHcrS3ZsUFNwa2tSMzJaZlh6V2JCS1A0bHQxdXljbUFxTXYvdlg0ZFJyRmZEUi8waldvK3NaRAptQmJrbHcxMHh4clA3d2JycHZTbTF2dEI5UWRnT0czN2hCOGs4TDloRzdPWXFFN0p2M0pqTzVWWFBueEFLL1BYCndnM3E2cnRIbzMrdWFlOGtGNWpDS3RCdEVGS3V1aXRodHpFRXdrVUNnWUJ0MDJlU2QzMFdiczNjQ3pVSndGWisKS0RNNjc1UUtPVEM3Vkh1UUFHd1FNYldzTnNEWXlwSFd4WE41dzNGbFc4TTV0LzhDdmxxV3Q0SzdDUnlOaVZ4ZQpyand0aUoxWmR0S0Q3RmNJUTdvaG5Lc1h6R2VTMlVveDVEaDBJWWZZdFh5bHFydUtpTnhrRkJSQkFuWVNJNUpyCmk5Wks4TzAwOEtlUENtSGFnMnd5OFFLQmdFazd0dG5wNHpETVpGN1o5ZVVrd1dveUJBN01Tb20wbWpmcWd2aHcKd3Z2TmVtRUY0RlpCQUIvclhzcExoQkF3dCtoRUZGbFNEQlVUM0xIY2dKRDFUWFVqS1JybVhSbnJmZm1XYVNFaQpVK3EycnI5RXNOVnk4NmNEOVB1R3NIeXppY0lhQ25RcXI2VEc3ejdtZUJHSjNyWG16WENlcWJCZE8zOVRZSG5uCkgySmhBb0dCQUwyTm1DbzJjaHU5VmwzMFhUVmxSZHRZaWlIQ3FqNkUwRC9YVWgyWTBmUGtWTmtyQTZGTm1lRE0KQ0tNNmp4Z2o1N2JKSDRadWJpWW9DYVlnZFhLbW4xc1BIKzhWVnV2bWJYZUZZNzVqYk1yYVFCaVR4YXk2VzNDQwpPYjZEZGFkTTN0Wm1vYU1lUnV4TXQ4MUZjUWluZ0VDOUU4ay9nYm1XeVB1UGVOZjM2NFZKCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVoVENDQTIyZ0F3SUJBZ0lVYWFsRjhvZzZVb3RCbjI1bEJ4RzJpdkFDeExFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEl3TURVeU56QXhNakl3TUZvWERUTXdNRFV5TlRBeE1qSXdNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFVcHBibWN4RURBT0JnTlZCQWNUQjBKbGFVcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBclBMZmZrbVZ3aUhad3d5SDZaejUKQ253MDR5czg1Z2FZVlR4WENtS1BtYnc1VHh0LzZXL1pYUkJVQ1hBMHB6TWJySjdaYVN2eXdYcUYyZFpTUmJMeAppNy8vaVZvbTk3MjkyVjI1N3B6OXBPZ2VWTGVBUmlySlg5TEhJcC9KQ29nUC9WbWtzeGpuakEvT2NrYW5VZWtqCnB0YzhHNTVyNitYWmJITjQ0QjNtRlVHSVV5QjZabmkxL2RGckp4L1h6OTVwcExVeUk2bklPUkNBa3NlSnJpZGwKSGdLdUF3ajFBOHRrVSs4U1pzYVlCY1BVblc5L1JsTmNYRDZOUXAwSVNuL2gxQ0tlN0hTdTZpZW1xUHpQTlRxTQoyNHg2V083MDArOUxGWGVuTUhjQTRvWmlmTUlNZkdWUHZaVlVKMkZxQzVHb0VrTUV3RGZlOUJHQWlFNHRYQkczClhRSURBUUFCbzRJQkt6Q0NBU2N3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUIwR0ExVWREZ1FXQkJSeGpxNFZVbmRXaGgvWQptSFJwcU1qcFBuTE9wakFmQmdOVkhTTUVHREFXZ0JSakM4K2ZVSEFKeDJuOFloeWt3c2F5OUVCaWtEQ0Jwd1lEClZSMFJCSUdmTUlHY2dncHJkV0psY201bGRHVnpnaEpyZFdKbGNtNWxkR1Z6TG1SbFptRjFiSFNDRm10MVltVnkKYm1WMFpYTXVaR1ZtWVhWc2RDNXpkbU9DSG10MVltVnlibVYwWlhNdVpHVm1ZWFZzZEM1emRtTXVZMngxYzNSbApjb0lrYTNWaVpYSnVaWFJsY3k1a1pXWmhkV3gwTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzaHdSL0FBQUJod1FLCmZ3QVFod1FLZndBUmh3UUtmd0FTaHdRS0NnQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNFSWl3NXBaYXkKRnd2YTNDUnlpQWZ6YStobVAyZXVGTXZEbm9vckRCM0FHWUdLRytiNFZGY3RGcnpQRlB0cmxDTmFGb0t5dU9lcQpvZHlUR3oyNHQ5UDAvbTRHTkJ4c3B6dlI1SlNMcVNBcm91T2FzdDk4c0h2Sy9aZE1mNW00OU9iMmRDWU84eFNPCnJ5UHNmeE5TV3YzMkNuNnk0SjJKdE5PbzhlV3VrakY1bnA4ZnlQTVlFd3BkcnozN3NKRDdybkRBVFVqVDhuazMKYkZydXpPVGo4UHgxek9TdU51L3lFNlF1bG94a2J1dS93aUszQitaSU1XeU16VER6WkYzdTlXank5cmxhWDM0YwpwME9VYkp1L2lrcXEwb3ZXUThuSjZ4VFgyRERqVENJVURwQ1c5Umh4KytNcnlSVXI2ZXpka2YrdU8yK3YrWWNiCjJCUHdJRXdmdnU0MAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVUEtNNnZVZUxOUDhVWHBUM1dIemIzK0RnWGF3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbAphV3BwYm1jeEREQUtCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByCmRXSmxjbTVsZEdWek1CNFhEVEl3TURVeU56QXhNakl3TUZvWERUSTFNRFV5TmpBeE1qSXdNRm93WlRFTE1Ba0cKQTFVRUJoTUNRMDR4RURBT0JnTlZCQWdUQjBKbGFXcHBibWN4RURBT0JnTlZCQWNUQjBKbGFXcHBibWN4RERBSwpCZ05WQkFvVEEyczRjekVQTUEwR0ExVUVDeE1HVTNsemRHVnRNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdExUcG5JSnlrS3Y3aFdzVDJwbkQKT0lUZE1iR05TK003RUVsN002WGFsOHdpNU5mMk1ldkRVZk05ZUpxM2ZFSGNXL0txb3hxRnhJUkZTSUhFWUU4eQpaNUh4YUt0VEZZbTJBRXluTU40TkkwcGsxRmZVSWFmWUNDY2o2Q1hKME9DNlpVbUVxYzVuY3l5SXlkc1I0R2MyCndiT085dGdvN1JsZ0dDQTk1dnAvTVNsTHJDUGNPSENaS3FIUWhTMmNRdEZTQ1RYUy9LSG5nKzNBQmtyY05pelIKeFBVR1dwdjU4VVNadWpHT2NNK3JxSEdaN2VodytuTHJhT3pVbWtTZnExb25jS2JJSU5nbENqYnU0dG4wOUxPNAo3MklPUjFXOFVJRm1uUkJOWGxESkpYeWxFMHVMMDRxTjNibG13MVVnSVI1Sy9zb0FQL0svbzV6dy9raTRPUXAvCnZRSURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVWXd2UG4xQndDY2RwL0dJY3BNTEdzdlJBWXBBd0h3WURWUjBqQkJnd0ZvQVVZd3ZQbjFCdwpDY2RwL0dJY3BNTEdzdlJBWXBBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJK2pIVng5ZXV1dDlsbHREVmxCCkFEbCtmVUprQzZxL0JvWEJLWCs2TWRCL0hnbmVCOGlqUmlmZkhyL1VOMmpDRkUrUkMyNnh3eXFtbjZjOUZndXUKVklXVkhlSnJWVkVqZkRlWWRidjF3Yy84VXR6bVFJNlg1ZlJTazZHcFlab3NMTVdpd3RiVVcvYTQzWDJ6WmJDbApUemRrbEJKR0VOK0ptYnR4eklpTngyK0w2UmsrSGwyeitMSEFFRTZNdVRTdzFxT3BGZ0ZaUlhHSUdwSGI1TUJICmgyZWlvZVNzVEdqd2hGcmYzVXI0SjVnc2hxVCttQWFBWDFpMXQ1cU10b0p1Si9HOEN4OUlnaXdCVVREZDJCdW4KSXl1blBNZW1MT2dkSDlzY3A2YlJqZ0RhM1c5d1ZMeC95Q0xEbnlENkNGYUp0S3NwLzB0ZlpTaDZBYmtOYlZ1WQp3MlE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K

---
# Source: calico/templates/calico-config.yaml
# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://10.127.0.16:2379,https://10.127.0.17:2379,https://10.127.0.18:2379"
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"

  # Typha is disabled.
  typha_service_name: "none"
  # Configure the backend to use.
  calico_backend: "bird"
  # Configure the MTU to use for workload interfaces and the
  # tunnels.  For IPIP, set to your network MTU - 20; for VXLAN
  # set to your network MTU - 50.
  veth_mtu: "1440"

  # The CNI network configuration to install on each node.  The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        },
        {
          "type": "bandwidth",
          "capabilities": {"bandwidth": true}
        }
      ]
    }

---
# Source: calico/templates/rbac.yaml

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
      - get
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  # Pod CIDR auto-detection on kubeadm needs access to config maps.
  - apiGroups: [""]
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists

      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: calico/cni:v3.14.0
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
          securityContext:
            privileged: true
        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
        # to communicate with Felix over the Policy Sync API.
        - name: flexvol-driver
          image: calico/pod2daemon-flexvol:v3.14.0
          volumeMounts:
          - name: flexvol-driver-host
            mountPath: /host/driver
          securityContext:
            privileged: true
      containers:
        # Runs calico-node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: calico/node:v3.14.0
          env:

            - name: KUBERNETES_SERVICE_HOST
              value: "10.127.0.16"
            - name: KUBERNETES_SERVICE_PORT
              value: "6443"
            - name: KUBERNETES_SERVICE_PORT_HTTPS
              value: "6443"

            # 定义ipv4自动发现网卡规则
            - name: IP_AUTODETECTION_METHOD
              value: "interface=ens.*,eth.*"
            # 定义ipv6自动发现网卡规则
            - name: IP6_AUTODETECTION_METHOD
              value: "interface=ens.*,eth.*"

            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            # - name: CALICO_IPV4POOL_CIDR
            #   value: "192.168.0.0/16"
            - name: CALICO_IPV4POOL_CIDR
              value: "10.20.0.0/16"

            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-live
              - -bird-live
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -felix-ready
              - -bird-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
            - name: policysync
              mountPath: /var/run/nodeagent
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
        # Used to install Flex Volume Driver
        - name: flexvol-driver-host
          hostPath:
            type: DirectoryOrCreate
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# Source: calico/templates/calico-kube-controllers.yaml
# See https://github.com/projectcalico/kube-controllers
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: calico-kube-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists

      serviceAccountName: calico-kube-controllers
      priorityClassName: system-cluster-critical
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-kube-controllers
          image: calico/kube-controllers:v3.14.0
          env:
            # The location of the etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---
# Source: calico/templates/calico-typha.yaml

---
# Source: calico/templates/configure-canal.yaml

---
# Source: calico/templates/kdd-crds.yaml


